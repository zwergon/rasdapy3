"""
 *
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU  General Public License for more details.
 *
 * You should have received a copy of the GNU  General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003 - 2018 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 *
"""


class ExceptionFactories:
    """
    Class to create a good error message from the error code of rasdaman, e.g: error code of this query:
    `create collection test_mr` is 308. The error message will be:
    rasdaman error 308: Parsing error: Unexpected end of query.
    """

    # NOTE: The content of this array comes from errtxts file (http://rasdaman.org/browser/bin/errtxts) via a bash script
    error_messages = [ $ARRAY_OF_ERROR_MESSAGES_FROM_ERRTXTS_FILE ]

    @staticmethod
    def __get_error_message(error_code):
        """
        From error_code to get the detail error message
        :param error_code: error_code of the query from rasdaman
        :return: error_message: detail of the error
        """
        for error_message in ExceptionFactories.error_messages:
            tmp = error_message.split(":", 1)
            code = tmp[0]
            if int(error_code) == int(code):
                return tmp[1]

        # Cannot find the error code
        error_message = "Unknown error from rasdaman with the error code '{}'.".format(error_code)
        return error_message

    @staticmethod
    def create_error_message(error_code, line_no, col_no, token):
        """
        Create an error message with details as in rasql
        :param error_code: error code (e.g: 357)
        :param line_no: line contains error (e.g: 1)
        :param col_no: column contains error (e.g: 15)
        :param token: error token which query cannot be parsed (e.g: select_into)
        :return: error message: contains detail information
        """
        error_message = "rasdaman error {}: {}".format(error_code, ExceptionFactories.__get_error_message(error_code))
        error_message = error_message.replace("$errorNo", str(error_code))
        error_message = error_message.replace("$lineNo", str(line_no))
        error_message = error_message.replace("$columnNo", str(col_no))
        error_message = error_message.replace("$token", str(token))

        return error_message
